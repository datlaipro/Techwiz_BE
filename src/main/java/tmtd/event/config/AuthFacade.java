
package tmtd.event.config;

import java.util.Objects;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import tmtd.event.config.JwtFilter.UserPrincipal;
import tmtd.event.events.JpaEvents;

@Component("auth") // üëà quan tr·ªçng: d√πng @auth.* trong SpEL
public class AuthFacade {

    private final JpaEvents jpaEvents;

    public AuthFacade(JpaEvents jpaEvents) {
        this.jpaEvents = jpaEvents;
    }

    /** ID ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ JWT (UserPrincipal) */
    public Long currentUserId() {
        Authentication a = SecurityContextHolder.getContext().getAuthentication();
        if (a == null || a.getPrincipal() == null)
            return null;
        if (a.getPrincipal() instanceof UserPrincipal up)
            return up.userId();
        return null;
    }

    /** Email hi·ªán t·∫°i (n·∫øu c√≥ trong UserPrincipal) */
    public String currentEmail() {
        Authentication a = SecurityContextHolder.getContext().getAuthentication();
        if (a == null || a.getPrincipal() == null)
            return null;
        if (a.getPrincipal() instanceof UserPrincipal up)
            return up.email();
        return null;
    }

    /** Chu·ªói raw roles t·ª´ UserPrincipal (n·∫øu b·∫°n c·∫ßn debug) */
    public String currentRawRoles() {
        Authentication a = SecurityContextHolder.getContext().getAuthentication();
        if (a == null || a.getPrincipal() == null)
            return null;
        if (a.getPrincipal() instanceof UserPrincipal up)
            return up.roles();
        return null;
    }

    /** Ki·ªÉm tra c√≥ role (h·ªó tr·ª£ truy·ªÅn "ADMIN" ho·∫∑c "ROLE_ADMIN") */
    public boolean hasRole(String role) {
        Authentication a = SecurityContextHolder.getContext().getAuthentication();
        if (a == null)
            return false;

        final String wanted = role.startsWith("ROLE_") ? role : ("ROLE_" + role);
        for (GrantedAuthority ga : a.getAuthorities()) {
            String auth = ga.getAuthority();
            if (Objects.equals(auth, wanted) || Objects.equals(auth, role)) {
                return true;
            }
        }
        return false;
    }

    /** Ch·ªß s·ªü h·ªØu s·ª± ki·ªán (organizer) ‚Äî t√™n g·ªëc b·∫°n ƒëang d√πng */
    public boolean isEventOwner(Long eventId) {
        Long uid = currentUserId();
        return uid != null && eventId != null
                && jpaEvents.existsByEventIdAndOrganizerId(eventId, uid);
    }

    /** Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi ch·ªó kh√°c c√≥ th·ªÉ g·ªçi isOwnerOfEvent(...) */
    public boolean isOwnerOfEvent(Long eventId) {
        return isEventOwner(eventId);
    }

    /** Admin ho·∫∑c ch√≠nh organizer c·ªßa event */
    public boolean canModerateEvent(Long eventId) {
        return hasRole(Roles.ADMIN) || isEventOwner(eventId);
    }
}
