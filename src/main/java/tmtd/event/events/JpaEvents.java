package tmtd.event.events;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

public interface JpaEvents extends JpaRepository<EntityEvents, Long>,
    JpaSpecificationExecutor<EntityEvents> {

  List<EntityEvents> findByCategoryIgnoreCase(String category);

  List<EntityEvents> findByDateBetween(LocalDate from, LocalDate to);

  // üîß L·∫•y s·ª± ki·ªán theo tr·∫°ng th√°i
  List<EntityEvents> findByStatus(EventStatus status);

  // üîß L·∫•y danh s√°ch s·ª± ki·ªán theo organizer
  List<EntityEvents> findByOrganizerId(Long organizerId);

  List<EntityEvents> findByCategoryIgnoreCaseAndStatus(String category, EventStatus status);

  // üîß Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu s·ª± ki·ªán
  boolean existsByEventIdAndOrganizerId(Long eventId, Long organizerId);

  // üîß Method m·ªõi: t√¨m s·ª± ki·ªán theo ID v√† organizer ID
  Optional<EntityEvents> findByEventIdAndOrganizerId(Long eventId, Long organizerId);

  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Query("delete from EntityEvents e where e.eventId = :id")
  int hardDeleteById(@Param("id") Long id);

  // üî• C·∫≠p nh·∫≠t GH·∫æ C√íN L·∫†I b·∫±ng c·ªôt `seat` khi ƒëƒÉng k√Ω
  // Tr·ª´ gh·∫ø (d√πng totalSeats nh∆∞ s·ªë gh·∫ø c√≤n l·∫°i)
  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Transactional
  @Query("""
          UPDATE EntityEvents e
             SET e.totalSeats = e.totalSeats - 1
           WHERE e.eventId = :id
             AND e.totalSeats > 0
      """)
  int tryConsumeSeat(@Param("id") Long eventId);

  // Ho√†n gh·∫ø
  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Transactional
  @Query("""
          UPDATE EntityEvents e
             SET e.totalSeats = e.totalSeats + 1
           WHERE e.eventId = :id
      """)
  int releaseSeat(@Param("id") Long eventId);

}
